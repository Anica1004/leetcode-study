# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
#class Solution:
#    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:   
#        if root is None:
#            return []

#        queue = [root]
#        result = []
#        while queue:
#            queue_size = len(queue)
#            for _ in range(queue_size):
#                current = queue.pop(0)
#                if current.left:
#                    queue.append(current.left)
#                if current.right:
#                    queue.append(current.right)

#            result.append(current.val)   
#        return result
# O(N) time, O(N) space where the N is the number of tree nodes. 

class Solution:
    def rightSideView(self, root: TreeNode) -> List[int]:
        if root is None:
            return []
        
        result = []

        def helper(node:TreeNode, level:int) -> None:
            if level == len(result):
                result.append(node.val)
            for child in [node.right, node.left]:
                if child:
                    helper(child, level + 1)

        helper(root, 0)
        return result
# O(N) time, O(H) space where the N is the number of tree nodes, H is the height of the tree