/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(vector<string>& pathFromRoot, TreeNode* root, string str) {
        if (!str.empty())
            str += "->";
        str += to_string(root->val);
        if (!root->left && !root->right)
            pathFromRoot.push_back(str);
        if (root->left)
            dfs(pathFromRoot, root->left, str);
        if (root->right)
            dfs(pathFromRoot, root->right, str);
        str.pop_back();
    }
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string> pathsFromRoot;
        if (root) {
            dfs(pathsFromRoot, root, "");
        }
        return pathsFromRoot;
    }
};