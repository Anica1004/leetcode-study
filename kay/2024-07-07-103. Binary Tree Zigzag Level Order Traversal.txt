/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> zigzagTraversal;
        queue<TreeNode*> nodeQueue;
        if (root)
            nodeQueue.push(root);
        for (int level = 0; !nodeQueue.empty(); level++) {
            int size = nodeQueue.size();
            vector<int> currentLevelNodes;
            for (int i = 0; i < size; i++) {
                TreeNode* curNode = nodeQueue.front();
                nodeQueue.pop();
                currentLevelNodes.push_back(curNode->val);
                if (curNode->left)
                    nodeQueue.push(curNode->left);
                if (curNode->right)
                    nodeQueue.push(curNode->right);
            }
            if (level % 2 == 1)
                reverse(currentLevelNodes.begin(), currentLevelNodes.end());
            zigzagTraversal.push_back(currentLevelNodes);
        }
        return zigzagTraversal;
    }
};