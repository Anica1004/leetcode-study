/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(TreeNode* root, int targetSum, int curSum, vector<int>& arrCurSum, vector<vector<int>>& arrSumIsTarget) {
        if (!root)
            return ;
        arrCurSum.push_back(root->val);
        if (root->left == NULL && root->right == NULL && curSum == targetSum)
            arrSumIsTarget.push_back(arrCurSum);
        if (root->left)
            dfs(root->left, targetSum, curSum + root->left->val, arrCurSum, arrSumIsTarget);
        if (root->right)
            dfs(root->right, targetSum, curSum + root->right->val, arrCurSum, arrSumIsTarget);
        arrCurSum.pop_back();
    }
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> arrSumIsTarget;
        vector<int> arrCurSum;
        if (root) 
            dfs(root, targetSum, root->val, arrCurSum, arrSumIsTarget);    
        return arrSumIsTarget;
    }
};