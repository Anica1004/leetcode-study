/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        queue<Node*> nodeQueue;
        if (root)
            nodeQueue.push(root);
        while (!nodeQueue.empty()) {
            int size = nodeQueue.size();
            for (int i = 0; i < size; i++) {
                Node* now = nodeQueue.front();
                nodeQueue.pop();
                if (now->left)
                    nodeQueue.push(now->left);
                if (now->right)
                    nodeQueue.push(now->right);
                if (i < size - 1)
                    now->next = nodeQueue.front();
                // if (i == size - 1)
                //     now->next = NULL;
            }
        }
        return root;
    }
};