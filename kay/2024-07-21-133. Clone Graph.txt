/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if (!node)
            return NULL;
        Node *newRoot = new Node(node->val);
        
        vector<int> visited(101, 0);
        visited[node->val] = 1;
        unordered_map<int, Node*> val2NodeMap;
        val2NodeMap[node->val] = newRoot;

        queue<pair<Node*, Node*>> nodeQueue;
        nodeQueue.push({node, newRoot});
        while (!nodeQueue.empty()) {
            auto cur = nodeQueue.front();
            nodeQueue.pop();
            for (auto neighNode : cur.first->neighbors) {
                if (visited[neighNode->val] == 0) {
                    visited[neighNode->val] = 1;
                    val2NodeMap[neighNode->val] = new Node(neighNode->val);
                    nodeQueue.push({neighNode, val2NodeMap[neighNode->val]});
                }
                cur.second->neighbors.push_back(val2NodeMap[neighNode->val]);
            }
        }
        return newRoot;
    }
};