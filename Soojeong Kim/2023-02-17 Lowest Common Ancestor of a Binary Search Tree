/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
//O(logN)
//O(H)
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        //binary search tree!!!!! not general one
        //left node < root < right node

        if(root==null) return null;  //maybe doesn't need, 
        //since It is said all nodes are unique and root contains both p and q,
        //thus root can not be null.
        if(p.val<root.val && q.val<root.val) {
            //since q is smaller than root
            //go to left
            return lowestCommonAncestor(root.left, p,q);
        }else if(p.val>root.val&&q.val>root.val) {
            return lowestCommonAncestor(root.right, p, q);
        }else 
        //left cases are p<root<q which is the right case
        return root;    
    }
}

//because Recursion is by definition slow as it has to create method frame inside stack on each call. choose Iteration over Recursion where ever possible.
//Recursion is always slower compared to iterative although worst case T.C is same
public class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        while (true) {
            if (root.val > p.val && root.val > q.val)
                root = root.left;
            else if (root.val < p.val && root.val < q.val)
                root = root.right;
            else
                return root;
        }
    }
}