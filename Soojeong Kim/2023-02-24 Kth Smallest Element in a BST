/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;

//first way -> O(nlogn)
class Solution {
    public int kthSmallest(TreeNode root, int k) {
        Queue<TreeNode> q = new LinkedList<>();
        ArrayList<Integer> list =new ArrayList<>();
        q.add(root);

        while(!q.isEmpty()) {
            TreeNode temp = q.poll();
            list.add(temp.val);
            if(temp.left != null) {
                q.add(temp.left); 
            }
            if(temp.right != null) {
                q.add(temp.right);
            }
        }
        Collections.sort(list);
        return list.get(k-1);       
    }
}

//recursive한 방법 -> O(logn + k)
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;

class Solution {
    public int kthSmallest(TreeNode root, int k) {
        //binary search tree
        //recursive로 할 수 있을 거 같은데... 아이디어....
        ArrayList<Integer> list = new ArrayList<>();
        inorderSearch(root, list, k);
        return list.get(k-1);
    }
    public void inorderSearch(TreeNode node, ArrayList<Integer> list, int k) {
        if(list.size()>=k) return;
        if(node.left != null) {
            inorderSearch(node.left, list, k);
        }
        list.add(node.val);
        if(node.right != null) {
            inorderSearch(node.right, list, k);
        }
    }
}