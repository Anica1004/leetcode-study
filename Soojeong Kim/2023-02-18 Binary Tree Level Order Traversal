/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        //binary tree
        List<List<Integer>> result = new ArrayList<>();
        if(root == null) return result;
        Queue<TreeNode> q= new LinkedList<>();
        q.add(root);

        while(!q.isEmpty()) {
            List<Integer> list = new ArrayList<>();
            int size = q.size();
            for(int i = 0; i<size;i++) {
                TreeNode temp = q.poll();
                list.add(temp.val);
                if(temp.left !=null) q.add(temp.left);
                if(temp.right != null) q.add(temp.right);
            }
            result.add(list);
        }

        return result;
    }
}
//O(N) and the n by here means the the number of nodes.