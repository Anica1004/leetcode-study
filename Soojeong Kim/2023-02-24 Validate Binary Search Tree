//first one

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;

class Solution {
    public boolean isValidBST(TreeNode root) {
        //at least it has one node, so no edge case
        Queue<TreeNode> q = new LinkedList<>();
        // int rightMinimum = root.val;
        // int leftMaximum = root.val;
        int standard = root.val;
        q.add(root);

        while(!q.isEmpty()) {
            int size = q.size();
            for(int i= 0; i<size;i++) {
                TreeNode temp = q.poll();
                if(temp.left != null ){
                    if(temp.left.val < temp.val) {
                        q.add(temp.left);
                    }else {
                        return false;
                    }
                }
                if(temp.right != null) {
                    if(temp.right.val > temp.val ) {
                        q.add(temp.right);
                    }else {
                        return false;
                    }
                }
            }

        }
        return true;
    }
}

//Second way
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;

class Solution {
    public boolean isValidBST(TreeNode root) {
        return helper(root, null, null);
    }
    boolean helper(TreeNode root, Integer min, Integer max) {
        if(root==null) return true;

        if((min != null && root.val <= min) || (max != null && root.val>=max)) {
            return false;
        }
        //왼쪽으로 넘어가고 오른쪽
        return helper(root.left, min, root.val ) && helper(root.right, root.val, max);
    }
}

