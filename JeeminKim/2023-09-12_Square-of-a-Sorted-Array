class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        # Approach 1: square then sort

        # for i, num in enumerate(nums):
        #     nums[i] = num * num
        # return sorted(nums)

        # Time complexity: O(nlogn)
        # Space complexity: O(1)

        # Approach 2: two pointer

        res = []
        l, r = 0, len(nums) - 1
        while l <= r:
            if abs(nums[l]) >= abs(nums[r]):
                res.append(nums[l] * nums[l])
                l += 1
            else:
                res.append(nums[r] * nums[r])
                r -= 1
        return reversed(res)

        # Time complexity: O(n)
        # Space complexity: O(n)
        